/*
 * GccCRAFT.c
 *
 * Created: 6/28/2021 12:25:05 AM
 * Author : hamed
 */ 

#include <avr/io.h>
#include <util/delay.h>
#include "global.h"
#include "lcd.h"
#include "rprintf.h" 

#define 	hexchar(X)   pgm_read_byte( HexChars+((X)&0x0f) )
#define D4 eS_PORTA4
#define D5 eS_PORTA5
#define D6 eS_PORTA6
#define D7 eS_PORTA7
#define RS eS_PORTA0
#define RW eS_PORTA1
#define EN eS_PORTA2



const int S[16] = { 0xc, 0xa, 0xd, 0x3, 0xe, 0xb, 0xf, 0x7, 0x8, 0x9, 0x1, 0x5, 0x0, 0x2, 0x4, 0x6 };
const int P[16] = { 0xF, 0xC, 0xD, 0xE, 0xA, 0x9, 0x8, 0xB, 0x6, 0x5, 0x4, 0x7, 0x1, 0x2, 0x3, 0x0 };
const int Q[16] = { 0xC, 0xA, 0xF, 0x5, 0xE, 0x8, 0x9, 0x2, 0xB, 0x3, 0x7, 0x4, 0x6, 0x0, 0x1, 0xD };
const int RC3[32] = { 0x1, 0x4, 0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4, 0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4, 0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4, 0x2, 0x5, 0x6, 0x7, 0x3, 0x1, 0x4, 0x2, 0x5 };
const int RC4[32] = { 0x1, 0x8, 0x4, 0x2, 0x9, 0xc, 0x6, 0xb, 0x5, 0xa, 0xd, 0xe, 0xf, 0x7, 0x3, 0x1, 0x8, 0x4, 0x2, 0x9, 0xc, 0x6, 0xb, 0x5, 0xa, 0xd, 0xe, 0xf, 0x7, 0x3, 0x1, 0x8 };
const int R = 31;
const int dec = 0;

uint32_t hex2int(char *hex) {
	uint32_t val = 0;
	while (*hex) {
		// get current character then increment
		char byte = *hex++;
		// transform hex character to the 4bit equivalent number, using the ascii table indexes
		if (byte >= '0' && byte <= '9') byte = byte - '0';
		else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
		else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
		// shift 4 to make space for new digit, and add the 4 bits of the new digit
		val = (val << 4) | (byte & 0xF);
	}
	return val;
}

uint64_t  Plain = 0x5734F006D8D88A3E; // Plain
uint64_t  Tweak = 0x54CD94FFD0670A58; // Tweak
uint64_t  Key_0 = 0x27A6781A43F364BC; // Key 0
uint64_t  Key_1 = 0x916708D5FBB5AEFE ; // Key 1
uint64_t  TCipher = 0xA17D6BD4BEEB996F; //True Ciphertext
int Stt[16], TK[4][16],TT[16];;
int i,j;
int MEM,k = 0;


void EEPROM_write(uint8_t uiAddress,uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
	EEDR = ucData;
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
}
unsigned char EEPROM_read(uint8_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
	/* Set up address register */
	EEAR = uiAddress;
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
	/* Return data from data register */
	return EEDR;
}


void save (uint32_t i,uint32_t j)
{
	for ( i ; i < j ;i++)
	{
		EEPROM_write(i,Stt[i]);
		
	}
}



void Initialize() {
	for (uint8_t i = 0; i < 16; i++)
				Stt[i] = ((Plain >> (4 * (15 - i))) & 0xf);
	for (uint8_t i = 0; i < 16; i++)
				TT[i] = ((TCipher >> (4 * (15 - i))) & 0xf);
	
	for (uint8_t i = 0; i < 16; i++)
				TK[0][i] = ((Key_0 >> (4 * (15 - i))) & 0xf);
	for (uint8_t i = 0; i < 16; i++)
				TK[1][i] = ((Key_1 >> (4 * (15 - i))) & 0xf);
	for (uint8_t i = 0; i < 16; i++)
				TK[2][i] = TK[0][i];
	for (uint8_t i = 0; i < 16; i++)
				TK[3][i] = TK[1][i];

	for (uint8_t i = 0; i < 16; i++)
				TK[0][i] ^= ((Tweak >> (4 * (15 - i))) & 0xf);
	for (uint8_t i = 0; i < 16; i++)
				TK[1][i] ^= ((Tweak >> (4 * (15 - i))) & 0xf);
	for (uint8_t i = 0; i < 16; i++)
				TK[2][i] ^= ((Tweak >> (4 * (15 - Q[i]))) & 0xf);
	for (uint8_t i = 0; i < 16; i++)
				TK[3][i] ^= ((Tweak >> (4 * (15 - Q[i]))) & 0xf);

	if (dec)
	for (uint8_t j = 0; j < 4; j++)
		for (uint8_t i = 0; i < 4; i++) {
				TK[j][i] ^= (TK[j][i + 8] ^ TK[j][i + 12]);
				TK[j][i + 4] ^= TK[j][i + 12];
	}


}

void Round(uint8_t r) {
	//MixColumn
	for (uint8_t i = 0; i < 4; i++) {
		Stt[i] ^= (Stt[i + 8] ^ Stt[i + 12]);
		Stt[i + 4] ^= Stt[i + 12];
	}

	//AddConstant
	uint8_t ind = r;
	if (dec)
			ind = R - r;
	Stt[4] ^= RC4[ind];
	Stt[5] ^= RC3[ind];

	//AddTweakey
	for (uint8_t i = 0; i < 16; i++)
			Stt[i] ^= TK[ind % 4][i];

	//Permutation
	uint8_t Temp[16];
	for (uint8_t i = 0; i < 16; i++)
			Temp[P[i]] = Stt[i];

	// SBox
	for (uint8_t i = 0; i < 16; i++)
			Stt[i] = S[Temp[i]];


}
void HalfRound(uint8_t r) {

	 char *fp_data[16];
	//MixColumn
	for (uint8_t i = 0; i < 4; i++) {
		Stt[i] ^= (Stt[i + 8] ^ Stt[i + 12]);
		Stt[i + 4] ^= Stt[i + 12];
	}

	//AddConstant
	uint8_t ind = r;
	if (dec)
			ind = R - r;
	Stt[4] ^= RC4[ind];
	Stt[5] ^= RC3[ind];

	//AddTweakey
	for (uint8_t i = 0; i < 16; i++)
			Stt[i] ^= TK[ind % 4][i];
	int counter = 0 ;
	for (i = 0; i < 16; i++)
			Stt[i] ^= TT[i];	
	if (Stt[0]==0) counter = counter +1 ;
	if (Stt[1]==0) counter = counter +1 ;
	if (Stt[2]==0) counter = counter +1 ;
	if (Stt[3]==0) counter = counter +1 ;
	if (Stt[4]==0) counter = counter +1 ;
	if (Stt[5]==0) counter = counter +1 ;
	if (Stt[6]==0) counter = counter +1 ;
	if (Stt[7]==0) counter = counter +1 ;
	if (Stt[8]==0) counter = counter +1 ;
	if (Stt[9]==0) counter = counter +1 ;
	if (Stt[10]==0) counter = counter +1 ;
	if (Stt[11]==0) counter = counter +1 ;
	if (Stt[12]==0) counter = counter +1 ;
	if (Stt[13]==0) counter = counter +1 ;
	if (Stt[14]==0) counter = counter +1 ;
	if (Stt[15]==0) counter = counter +1 ;
	if (counter>=8){
		lcdClear();
		lcdGotoXY(0, 0);
		///rprintf("fault >= 8 nibble");
		for (i = 0; i < 16; i++){
			if (Stt[i]==0)fp_data[i]="0";
			if (Stt[i]==1)fp_data[i]="1";
			if (Stt[i]==2)fp_data[i]="2";
			if (Stt[i]==3)fp_data[i]="3";
			if (Stt[i]==4)fp_data[i]="4";
			if (Stt[i]==5)fp_data[i]="5";
			if (Stt[i]==6)fp_data[i]="6";
			if (Stt[i]==7)fp_data[i]="7";
			if (Stt[i]==8)fp_data[i]="8";
			if (Stt[i]==9)fp_data[i]="9";
			if (Stt[i]==10)fp_data[i]="A";
			if (Stt[i]==11)fp_data[i]="B";
			if (Stt[i]==12)fp_data[i]="C";
			if (Stt[i]==13)fp_data[i]="D";
			if (Stt[i]==14)fp_data[i]="E";
			if (Stt[i]==15)fp_data[i]="F";
			
			
			
			lcdClear();
			lcdGotoXY(0, 1);
			uint16_t x0 = hex2int(fp_data[0]);
			rprintfu04(x0);
			lcdGotoXY(1, 1);
			uint16_t x1 = hex2int(fp_data[1]);
			rprintfu04(x1);
			lcdGotoXY(2, 1);
			uint16_t x2 = hex2int(fp_data[2]);
			rprintfu04(x2);
			lcdGotoXY(3, 1);
			uint16_t x3 = hex2int(fp_data[3]);
			rprintfu04(x3);
			lcdGotoXY(4, 1);
			uint16_t x4 = hex2int(fp_data[4]);
			rprintfu04(x4);
			lcdGotoXY(5, 1);
			uint16_t x5 = hex2int(fp_data[5]);
			rprintfu04(x5);
			lcdGotoXY(6, 1);
			uint16_t x6 = hex2int(fp_data[6]);
			rprintfu04(x6);
			lcdGotoXY(7, 1);
			uint16_t x7 = hex2int(fp_data[7]);
			rprintfu04(x7);
			lcdGotoXY(8, 1);
			uint16_t x8 = hex2int(fp_data[8]);
			rprintfu04(x8);
			lcdGotoXY(9, 1);
			uint16_t x9 = hex2int(fp_data[9]);
			rprintfu04(x9);
			lcdGotoXY(10, 1);
			uint16_t x10 = hex2int(fp_data[10]);
			rprintfu04(x10);
			lcdGotoXY(11, 1);
			uint16_t x11 = hex2int(fp_data[11]);
			rprintfu04(x11);
			lcdGotoXY(12, 1);
			uint16_t x12 = hex2int(fp_data[12]);
			rprintfu04(x12);
			lcdGotoXY(13, 1);
			uint16_t x13 = hex2int(fp_data[13]);
			rprintfu04(x13);
			lcdGotoXY(14, 1);
			uint16_t x14 = hex2int(fp_data[14]);
			rprintfu04(x14);
			lcdGotoXY(15, 1);
			uint16_t x15 = hex2int(fp_data[15]);
			rprintfu04(x15);
			
			_delay_ms(500);
		}

	}
	
}

int main(void)
{
	lcdInit();
	rprintfInit(lcdDataWrite);
    while (TRUE) 
    {
		int r;
		lcdClear();
		Initialize();
		for (r = 0; r < R; r++){
			Round(r);
		}	
		HalfRound(R);
		lcdClear();
		_delay_ms(500);
		
	
    }
}  

